Redux Setup (redux/store.ts, redux/actions.ts, redux/reducers.ts, redux/types.ts)
// redux/store.ts
import { createStore } from 'redux';
import rootReducer from './reducers';

const store = createStore(rootReducer);

export default store;

//redux/actions.ts
// redux/actions.ts
export const SET_CURRENT_FORM = 'SET_CURRENT_FORM';

export interface SetCurrentFormAction {
  type: typeof SET_CURRENT_FORM;
  payload: string;
}

export const setCurrentForm = (formKey: string): SetCurrentFormAction => ({
  type: SET_CURRENT_FORM,
  payload: formKey,
});


//redux/reducers.ts
// redux/reducers.ts
import { SET_CURRENT_FORM, SetCurrentFormAction } from './actions';

interface RootState {
  currentForm: string | null;
}

const initialState: RootState = {
  currentForm: null,
};

const rootReducer = (state = initialState, action: SetCurrentFormAction): RootState => {
  switch (action.type) {
    case SET_CURRENT_FORM:
      return { ...state, currentForm: action.payload };
    default:
      return state;
  }
};

export default rootReducer;


//redux/types.ts
export interface AppState {
  currentForm: string | null;
}

export interface SetCurrentFormAction {
  type: 'SET_CURRENT_FORM';
  payload: string;
}
//redux/store.ts
// redux/store.ts
import { createStore, applyMiddleware, compose } from 'redux';
import rootReducer from './reducers';

const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;
const store = createStore(rootReducer, composeEnhancers(
  applyMiddleware(/* other middleware */)
));

export default store;
